# Copyright (C) 2016-Present Pivotal Software, Inc. All rights reserved.
# This program and the accompanying materials are made available under the terms of the under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.

<%=
  def cf_config
    cf = link('broker').p('cf')
    cf_auth = cf['authentication']
    client_credentials = cf_auth['client_credentials']
    cf_auth['uaa'] = {
      'url' => cf_auth['url'],
      'client_credentials' => {
        'client_id' => client_credentials['client_id'],
        'client_secret' => client_credentials['secret']
      },
      'user_credentials' => cf_auth['user_credentials']
    }
    cf_auth.delete('url')
    cf_auth.delete('client_credentials')
    cf_auth.delete('user_credentials')
    cf
  end

  def broker_default_address
    brokerCert = link('broker').p('tls.certificate', "")
    s = "s" unless brokerCert.empty?
    "http#{s}://#{link('broker').instances[0].address}:#{link('broker').p('port')}"
  end

  def broker_url
    p('broker_uri', broker_default_address)
  end

  def service_access plan
    valid_access_types = %w{enable disable org-restricted manual}
    access_type = plan['cf_service_access'] || 'enable'
    unless valid_access_types.include? access_type
      raise "Unexpected \"cf_service_access: #{access_type}\" for plan \"#{plan['name']}\". \"cf_service_access\" must be one of: #{valid_access_types.join(", ")}."
    end
    access_type
  end

  def access_org plan
    access_org = plan['service_access_org']
    access_type = plan['cf_service_access']

    if access_type != "org-restricted" && ! (access_org.nil? || access_org.empty?) then
      raise "Unexpected \"service_access_org\" for plan \"#{plan['name']}\". \"service_access_org\" is only valid for org-restricted plans."
    end

    if access_type == "org-restricted" && (access_org.nil? || access_org.empty?) then
      raise "Unexpected \"service_access_org\" for plan \"#{plan['name']}\". \"service_access_org\" must be set for org-restricted plans."
    end
    access_org
  end

  def plans
    link('broker').p('service_catalog.plans')
      .reject{ |plan| plan.nil? || plan['cf_service_access'] == 'manual' }
      .map do |plan|
        {
          'name' => plan['name'],
          'cf_service_access' => service_access(plan),
          'service_access_org' => access_org(plan)
        }
      end
  end

  config = {
    'broker_name' => p('broker_name'),
    'broker_username' => link('broker').p('username'),
    'broker_password' => link('broker').p('password'),
    'broker_url' => broker_url,
    'disable_ssl_cert_verification' => link('broker').p('disable_ssl_cert_verification'),
    'cf' => cf_config,
    'service_offering_id' => link('broker').p('service_catalog.id'),
    'plans' => plans
  }.to_yaml
%>
