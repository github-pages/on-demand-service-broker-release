# Copyright (C) 2016-Present Pivotal Software, Inc. All rights reserved.
# This program and the accompanying materials are made available under the terms of the under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.

<%
required_catalog_keys = ["id", "service_name", "service_description", "bindable", "plan_updatable", "plans"]
required_plan_keys = ['name', 'plan_id', 'description', 'instance_groups']
required_instance_group_keys = ['name', "vm_type", "instances", "networks", "azs"]
required_binding_with_dns_keys = ['name', 'link_provider', 'instance_group']
valid_binding_with_dns_properties = ['azs', 'status']
valid_dns_status = ['default', 'healthy', 'unhealthy', 'all']
valid_cf_service_access_values = ['enable', 'disable', 'manual', 'org-restricted']

def validate_config(hash, keys, message)
  keys.each do |key|
    val = hash[key]
    raise message+key if val.nil?
    if [Array, String].include? val.class
      raise message+key if val.empty?
    end
  end
end

def has_values?(field)
  p(field).values.any?
end

def any_fields_set?(hash)
  hash.any? { |_, v| !v.nil? }
end

def validate_maintenance_info(p)
  %w{public private}.each do |k|
    h = p.dig('maintenance_info', k)
    unless h.nil?
      h.each do |key, value|
        if value.is_a?(Hash) || value.is_a?(Array)
          raise "the values for maintenance_info.#{k} cannot be nested"
        end
      end
    end
  end
end

def validate_releases(service_deployment)
  if service_deployment['releases'].nil?
    raise "Invalid service_deployment config - must specify releases"
  end

  if service_deployment['releases'].empty?
    raise "Invalid service_deployment config - must specify at least one release"
  end

  required_release_keys = ['name', 'version', 'jobs']

  service_deployment['releases'].each do |r|
    validate_config(r, required_release_keys, "Invalid service_deployment.releases config - must specify ")

    if r['version'] =~ /latest$/
      raise "You must configure the exact release and stemcell versions in broker.service_deployment. " +
        "ODB requires exact versions to detect pending changes as part of the 'cf update-service' workflow. For example, latest and 3112.latest are not supported."
    end
  end
end

def validate_stemcell(service_deployment)
  required_stemcell_keys = %w{os version}
  validate_config(service_deployment['stemcell'], required_stemcell_keys, "Invalid service_deployment.stemcell config - must specify ")
  if service_deployment['stemcell']['version'] =~ /latest$/
    raise "You must configure the exact release and stemcell versions in broker.service_deployment. " +
      "ODB requires exact versions to detect pending changes as part of the 'cf update-service' workflow. For example, latest and 3112.latest are not supported."
  end
end

def credhub_link_valid?(credhub_link)
  ['internal_url', 'ca_certificate', 'port'].each do |v|
    if credhub_link.p("credhub.#{v}") == ''
      return false
    end
  end

  return true
end

def credhub_config
  credhub_properties = {}

  if p('secure_binding_credentials.enabled')
    if_link('credhub') do |credhub|
      raise "Secure service binding is enabled but CredHub link is empty" unless credhub_link_valid?(credhub)

      credhub_url = credhub.p('credhub.internal_url')
      credhub_url = "https://#{credhub_url}" unless credhub_url.start_with?('http')

      credhub_properties = {
        'credhub' => {
          'api_url' => "#{credhub_url}:#{credhub.p('credhub.port')}",
          'ca_cert' => credhub.p('credhub.ca_certificate'),
          'client_id' => p('secure_binding_credentials.authentication.uaa.client_id'),
          'client_secret' => p('secure_binding_credentials.authentication.uaa.client_secret'),
          'internal_uaa_ca_cert' => p('secure_binding_credentials.authentication.uaa.ca_cert'),
        }
      }
    end.else do
      raise "secure_binding_credentials is enabled, but no CredHub link was provided"
    end
  end

  credhub_properties
end

def service_instances_api_config
  siapi_properties = {}

  if_p('service_instances_api', "") do |config|
    unless config["url"].nil?
      siapi_properties = {
        'service_instances_api' => config
      }
    end
  end

  siapi_properties
end

if has_values?('secure_binding_credentials.authentication.uaa')
  validate_config(p('secure_binding_credentials.authentication.uaa'), ['client_id', 'client_secret'], 'Invalid secure_binding_credentials config - must specify ')
end

service_catalog = p('service_catalog')
if service_catalog.dig('maintenance_info', 'public').empty? && service_catalog.dig('maintenance_info', 'private').empty?
  service_catalog.delete('maintenance_info')
else
  validate_maintenance_info(service_catalog)
end

plans = service_catalog['plans'] || []
plans.delete_if { |plan| plan.nil? }

validate_config(service_catalog, required_catalog_keys, "Invalid service_catalog config - must specify ")

if !any_fields_set?(p('bosh.authentication.basic')) && !any_fields_set?(p('bosh.authentication.uaa'))
  raise 'Invalid bosh config - must specify authentication'
end

if any_fields_set?(p('bosh.authentication.basic')) && any_fields_set?(p('bosh.authentication.uaa'))
  raise 'Invalid bosh config - must only specify one type of authentication'
end

service_deployment = p('service_deployment')
validate_releases(service_deployment)
validate_stemcell(service_deployment)

if p('disable_cf_startup_checks')
  global_limit = service_catalog.dig('global_quotas', 'service_instance_limit')
  if global_limit != nil && global_limit > 0
    raise 'Invalid quota configuration - global service instance limit requires CF to be configured'
  end

  global_resource_limit = service_catalog.dig('global_quotas', 'resource_limits')
  if global_resource_limit && any_fields_set?(global_resource_limit)
    raise 'Invalid quota configuration - global resource limits require CF to be configured'
  end
end

def enabled_errands(errands, errand_type)
  errands.reject do |errand|
    disabled = errand.fetch('disabled', false).to_s
    raise "Plan property lifecycle_errands.#{errand_type}.disabled must be boolean value." unless %w[true false].include? disabled
    disabled == 'true'
  end
end

plans.each do |plan|
  validate_config(plan, required_plan_keys, "Invalid plan config - must specify ")

  validate_maintenance_info(plan)

  plan['instance_groups'].each do |instance_group|
    validate_config(instance_group, required_instance_group_keys, "Invalid instance group config - must specify ")
  end

  if plan.has_key?('cf_service_access') && !valid_cf_service_access_values.include?(plan.fetch('cf_service_access'))
    raise "Unsupported value '#{plan.fetch('cf_service_access')}' for cf_service_access. Choose from \"enable\", \"disable\", \"manual\", \"org-restricted\""
  end

  if plan.has_key?('binding_with_dns')
    unless p('use_stdin')
      raise "Plan #{plan['name']} configures binding_with_dns, but use_stdin is disabled"
    end

    plan['binding_with_dns'].each do |bind_with_dns|
      validate_config(bind_with_dns, required_binding_with_dns_keys, 'Invalid binding with dns config - must specify ')

      bind_with_dns.fetch('properties', {}).keys.each do |key|
        unless valid_binding_with_dns_properties.include? key
          raise "Invalid binding with dns config - #{key} is not a valid property"
        end
      end

      azs = bind_with_dns.dig('properties', 'azs')
      unless azs.nil? || azs.kind_of?(Array)
        raise "Invalid binding with dns config - azs must be a list"
      end

      status = bind_with_dns.dig('properties', 'status')
      unless status.nil? || status.empty? || valid_dns_status.include?(status)
        raise "Invalid binding with dns config - status must be one of the following: #{valid_dns_status.join(", ")}"
      end
    end
  end

  pre_delete_errands = plan['lifecycle_errands'].to_h['pre_delete']
  if pre_delete_errands != nil
    if pre_delete_errands.class != Array
      raise "Plan property lifecycle_errands.pre_delete must be an array."
    end

    plan['lifecycle_errands']['pre_delete'] = enabled_errands(pre_delete_errands, 'pre_delete')
  end

  post_deploy_errands = plan['lifecycle_errands'].to_h['post_deploy']
  if post_deploy_errands != nil
    if post_deploy_errands.class != Array
      raise "Plan property lifecycle_errands.post_deploy must be an array."
    end

    plan['lifecycle_errands']['post_deploy'] = enabled_errands(post_deploy_errands, 'post_deploy')
  end

  if p('disable_cf_startup_checks')
    plan_limit = plan.dig('quotas', 'service_instance_limit')
    if plan_limit != nil && plan_limit > 0
      raise 'Invalid quota configuration - plan service instance limit requires CF to be configured'
    end

    plan_resource_limit = plan.dig('quotas', 'resource_limits')
    if plan_resource_limit && any_fields_set?(plan_resource_limit)
      raise 'Invalid quota configuration - plan resource limit requires CF to be configured'
    end
  end
end

if has_values?("cf.authentication.client_credentials") && has_values?("cf.authentication.user_credentials")
  raise "Invalid CF authentication config - must specify either client or user credentials"
end

def normalise_bosh_authentication(bosh)
  uaa_config = bosh['authentication']['uaa']
  uaa_config['client_credentials'] = {
    'client_id' => uaa_config['client_id'],
    'client_secret' => uaa_config['client_secret'],
  }
  uaa_config.delete('client_id')
  uaa_config.delete('client_secret')
end

def bosh_config
  bosh = p('bosh')
  normalise_bosh_authentication(bosh)
  bosh
end

def cf_config
  cf = p('cf')
  cf_auth = cf['authentication']
  client_credentials = cf_auth['client_credentials']
  cf_auth['uaa'] = {
    'url' => cf_auth['url'],
    'client_credentials' => {
      'client_id' => client_credentials['client_id'],
      'client_secret' => client_credentials['secret']
    },
    'user_credentials' => cf_auth['user_credentials']
  }
  cf_auth.delete('url')
  cf_auth.delete('client_credentials')
  cf_auth.delete('user_credentials')
  cf
end

def validate_bosh_credhub_api(bosh_credhub)
    if ['url', 'root_ca_cert', 'authentication.uaa.client_credentials.client_id', 'authentication.uaa.client_credentials.client_secret'].all? do |k|
        bosh_credhub.dig(*k.split('.')).nil?
      end
      raise 'bosh_credhub_api error: not configured'
    end

    required_bosh_cred_api_keys = ['url', 'root_ca_cert']
    validate_config(bosh_credhub, required_bosh_cred_api_keys, 'bosh_credhub_api error: missing ')

    if ['authentication.uaa.client_credentials.client_id', 'authentication.uaa.client_credentials.client_secret'].all? do |k|
        bosh_credhub.dig(*k.split('.')).nil?
      end
      raise 'bosh_credhub_api error: missing authentication configuration'
    end

    required_bosh_client_credentials_keys = ['client_id', 'client_secret']
    validate_config(bosh_credhub['authentication']['uaa']['client_credentials'], required_bosh_client_credentials_keys, 'bosh_credhub_api error: missing authentication.uaa.client_credentials.')
end

if p('enable_secure_manifests')
  unless p('use_stdin')
    raise "enable_secure_manifests requires use_stdin to be enabled"
  end

  begin
    validate_bosh_credhub_api p('bosh_credhub_api')
  rescue StandardError => err
    raise "enable_secure_manifests requires bosh_credhub_api to be configured, but " + err.message
  end
end

def tls_config
  tls_conf = {}
  if_p('tls') do |config|
    unless config["certificate"].nil? || config["private_key"].nil?
      tls_conf = {
        'tls' => {
          'cert_file' => '/var/vcap/jobs/broker/certs/broker.crt',
          'key_file' => '/var/vcap/jobs/broker/certs/broker.key'
        }
      }
    end
  end
  tls_conf
end

config = {
  "broker" => {
    "port" => p('port'),
    "username" => p('username'),
    "password" => p('password'),
    "disable_ssl_cert_verification" => p('disable_ssl_cert_verification'),
    "disable_bosh_configs" => p('disable_bosh_configs'),
    "disable_cf_startup_checks" => p('disable_cf_startup_checks'),
    "startup_banner" => p('startup_banner'),
    "shutdown_timeout_in_seconds" => p('shutdown_timeout_in_seconds'),
    "expose_operational_errors" => p('expose_operational_errors'),
    "enable_plan_schemas" => p('enable_plan_schemas'),
    "use_stdin" => p('use_stdin'),
    "enable_secure_manifests" => p('enable_secure_manifests'),
  }.merge(tls_config),
  "bosh" => bosh_config,
  "cf" => cf_config,
  "service_adapter" => p('service_adapter'),
  "service_deployment" => p('service_deployment'),
  "service_catalog" => service_catalog,
  "bosh_credhub" => p('bosh_credhub_api')
}.merge(credhub_config).merge(service_instances_api_config)
%>

<%= config.to_yaml %>
